# # ===============================================
# # Environment Variables
# # ===============================================

# @host = localhost
# @port = 8000
# @local_server_port = 8001
# @cloud_manager_token = ""
# @father_token = ""
# @father_admin_id = ""
# @new_child_user_id = ""

# ### 
# # 1. Login to the Cloud Manager (Layer 0) to get a token
# # You must have a 'grandfather_admin' created in your cloud's DB.
# ###
# POST http://{{host}}:{{port}}/api/login/
# Content-Type: application/json

# {
#     "username": "admin-2",
#     "password": "Bluck@07"
# }

# > {%
#   client.global.set("cloud_manager_token", response.body.access);
# %}

# ###
# # 2. Login to the Admin Layer 1 to get a token
# # You must have a 'father_admin' created in your Layer 1's DB.
# # This request also gets the father's ID for later use in the sync payload.
# ###
# POST http://{{host}}:{{local_server_port}}/api/login/
# Content-Type: application/json

# {
#   "username": "admin-2",
#   "password": "Bluck@07"
# }

# > {%
#   client.global.set("father_token", response.body.access);
#   // Assuming the user ID is returned in the login response
#   client.global.set("father_admin_id", response.body.user.admin_id);
# %}


# # ===============================================
# # Test 1: Sync Up from a Child (simulated) to Layer 1 (Father)
# # ===============================================
# # The Layer 1 backend (port 8001) is the endpoint.
# # The payload simulates a Layer 2 child creating a new user.

# ###
# POST http://{{host}}:{{local_server_port}}/api/sync/
# Content-Type: application/json
# Authorization: Bearer {{father_token}}

# {
#   "sync_items": [
#     {
#       "model_name": "User",
#       "action": "create",
#       "temp_id": "1a2b3c4d-1234-5678-90ab-1a2b3c4d5e6f",
#       "data": {
#         "username": "child_user_1",
#         "email": "child1@example.com",
#         "parent_admin_id": "{{father_admin_id}}"
#       }
#     }
#   ],
#   "last_sync_timestamp": "2025-08-15T10:00:00Z",
#   "source_device_id": "device-123-abc"
# }

# > {%
#   // Capture the new permanent ID for the created user
#   const responseBody = response.body;
#   if (responseBody.sync_up_responses && responseBody.sync_up_responses.length > 0) {
#     const userCreationResponse = responseBody.sync_up_responses[0];
#     if (userCreationResponse.status === "created") {
#       client.global.set("new_child_user_id", userCreationResponse.permanent_id);
#     }
#   }
# %}


# # ===============================================
# # Test 2: Sync Up from Layer 1 to Cloud (Father to Grandfather)
# # ===============================================
# # The Layer 1 backend has the new user. We now simulate it sending that update to the Cloud.

# ###
# POST http://{{host}}:{{port}}/api/sync/
# Content-Type: application/json
# Authorization: Bearer {{cloud_manager_token}}

# {
#   "sync_items": [
#     {
#       "model_name": "User",
#       "action": "create",
#       "data": {
#         "user_id": "{{new_child_user_id}}",
#         "username": "child_user_1",
#         "email": "child1@example.com",
#         "parent_admin_id": "{{father_admin_id}}"
#       }
#     }
#   ],
#   "last_sync_timestamp": "2025-08-15T11:00:00Z",
#   "source_device_id": "device-123-abc"
# }


# # ===============================================
# # Test 3: Sync Down from Cloud to Layer 1 (Grandfather to Father)
# # ===============================================
# # The Cloud has a change that the Layer 1 admin doesn't have.
# # This test simulates the Layer 1 admin polling the cloud for updates.

# # First, create a change directly in the Cloud's DB or via a separate API endpoint.
# # We'll assume a new user with ID "new-cloud-user-id" has been created on the cloud.

# ###
# POST http://{{host}}:{{port}}/api/sync/
# Content-Type: application/json
# Authorization: Bearer {{cloud_manager_token}}

# {
#   "sync_items": [],
#   "last_sync_timestamp": "2025-08-15T11:50:00Z",
#   "source_device_id": "device-456-def"
# }

# > {%
#   // You would typically process the sync_down_items here on the client side
#   // For example, update the local database with the new data
#   const responseBody = response.body;
#   console.log("Received sync down items:", responseBody.sync_down_items);
# %}



### Configure your environment variables
@server0_url = http://192.168.1.130:8000
@server1_url = http://127.0.0.1:8001
@server2_url = http://127.0.0.1:8002

@admin0_username = admin-2
@admin1_username = admin1
@admin2_username = admin2

@admin0_password = Bluck@07
@admin1_password = password123
@admin2_password = password123

@current_timestamp = {{$iso8601}}

@admin0_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU2MDMzNjIyLCJpYXQiOjE3NTYwMzMzMjIsImp0aSI6ImNlNjJhMTc3MGFjNzQ1MTRhNGNjMzJlZDdmODRiNTIwIiwidXNlcl9pZCI6ImU1MTkwZjM5LTc1ODktNDk0Yi04MTg5LTdlYjJlNTAyNTYzMiIsInVzZXJuYW1lIjoiYWRtaW4tMiIsImVtYWlsIjoiYWJkZWxrYWRlcmJvdWthcnQ0QGdtYWlsLmNvbSJ9.3fd37teJbH4YRlag43_ucCRN61Au0NoA-tYUCh4cleE"
@admin1_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU2MDMzNzE2LCJpYXQiOjE3NTYwMzM0MTYsImp0aSI6ImQzZDdiZGY3ODg3ZjRkNDBhZmExNWM1NWE4MTFhYzhkIiwidXNlcl9pZCI6IjZmMjg5OGIyLWEwOWMtNDlhZC05MDYzLWM5MzI2MGMxNDY5ZiIsInVzZXJuYW1lIjoiYWRtaW4xIiwiZW1haWwiOiJhZG1pbjFAZXhhbXBsZS5jb20ifQ.iMExGyJs0Xbk4TJTHdtW04SOBfrknl6HFuN26R8J2WM"
@admin2_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzU2MDMzNzc1LCJpYXQiOjE3NTYwMzM0NzUsImp0aSI6ImMyZjgwNGM3OGZkMTQ2ZjE5MGU2MDE2ZWIzODcyMzE3IiwidXNlcl9pZCI6IjUxNTkyYTgxLWY3MDItNDgxOC1iYTg4LTJmMGQzMzNjZTUyYSIsInVzZXJuYW1lIjoiYWRtaW4yIiwiZW1haWwiOiJhZG1pbjJAZXhhbXBsZS5jb20ifQ.e2j3oyQvPqF0Ti23xXvFl_WyngWd7vCgShRufqMu93U"
}
# --- Authentication and Setup ---

### Step 1: Login to all three servers and get tokens
# We'll store the access tokens to be used in subsequent requests.

### Login to Server 0 (Master)
POST {{server0_url}}/api/login/
Content-Type: application/json

{
  "username": "{{admin0_username}}",
  "password": "{{admin0_password}}"
}
> {% client.global.set("admin0_token", response.body.access) %}


### Login to Server 1 (Middle)
POST {{server1_url}}/api/login/
Content-Type: application/json

{
  "username": "{{admin1_username}}",
  "password": "{{admin1_password}}"
}
> {% client.global.set("admin1_token", response.body.access) %}


### Login to Server 2 (Client)
POST {{server2_url}}/api/login/
Content-Type: application/json

{
  "username": "{{admin2_username}}",
  "password": "{{admin2_password}}"
}
#> {% client.global.set("admin2_token", response.body.access) %}


### Step 2: Create a local user on Server 2 (Client)
# This uses the new URL path from your urls.py.

POST {{server2_url}}/api/network/users/create/
Content-Type: application/json
Authorization: Bearer {{admin2_token}}

{
  "username": "test_user_{{$randomInt}}",
  "email": "testuser_{{$randomInt}}@example.com",
  "password": "password123"
}
# > {% client.global.set("user_id", response.body.id) %}


### Step 3: Upstream Sync (Server 2 -> Server 1)
# Server 2 sends its local changes (the new user) to its parent, Server 1.

POST {{server1_url}}/api/sync/
Content-Type: application/json
Authorization: Bearer {{admin2_token}}

{
  "sync_items": [
    {
      "model_name": "User",
      "action": "create",
      "temp_id": "{{user_id}}",
      "data": {
        "id": "{{user_id}}",
        "username": "test_user_{{$randomInt}}",
        "email": "testuser_{{$randomInt}}@example.com",
        "password": "password123"
      }
    }
  ],
  "last_sync_timestamp": "1970-01-01T00:00:00Z",
  "source_device_id": "server-2-device-id"
}
> {% client.global.set("sync_2_to_1_timestamp", response.body.current_timestamp) %}

### Step 4: Upstream Sync (Server 1 -> Server 0)
# Server 1 now has the new user and sends the change to the master, Server 0.

POST {{server0_url}}/api/sync/
Content-Type: application/json
Authorization: Bearer {{admin1_token}}

{
  "sync_items": [
    {
      "model_name": "User",
      "action": "create",
      "temp_id": "{{user_id}}",
      "data": {
        "id": "{{user_id}}",
        "username": "test_user_{{$randomInt}}",
        "email": "testuser_{{$randomInt}}@example.com",
        "password": "password123"
      }
    }
  ],
  "last_sync_timestamp": "1970-01-01T00:00:00Z",
  "source_device_id": "server-1-device-id"
}
> {% client.global.set("sync_1_to_0_timestamp", response.body.current_timestamp) %}


### Step 5: Downstream Sync (Server 0 -> Server 1)
# A new change is created on Server 0 and needs to be synced down.

### 5a. Create a new device directly on Server 0 (master)
POST {{server0_url}}/api/devices/
Content-Type: application/json
Authorization: Bearer {{admin0_token}}

{
  "name": "MasterDevice_{{$randomInt}}",
  "device_type": "PC"
}
> {% client.global.set("master_device_id", response.body.id) %}

### 5b. Server 1 syncs with Server 0, receiving the new device
POST {{server0_url}}/api/sync/
Content-Type: application/json
Authorization: Bearer {{admin1_token}}

{
  "sync_items": [],
  "last_sync_timestamp": "{{sync_1_to_0_timestamp}}",
  "source_device_id": "server-1-device-id"
}